// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/servicebus/sender.go
//
// Generated by this command:
//
//	mockgen -source=./internal/servicebus/sender.go -package=servicebus -destination=./internal/servicebus/mock_sender.go
//

// Package servicebus is a generated GoMock package.
package servicebus

import (
	context "context"
	reflect "reflect"
	time "time"

	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// CancelScheduledMessages mocks base method.
func (m *MockSender) CancelScheduledMessages(ctx context.Context, sequenceNumbers []int64, options *azservicebus.CancelScheduledMessagesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelScheduledMessages", ctx, sequenceNumbers, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelScheduledMessages indicates an expected call of CancelScheduledMessages.
func (mr *MockSenderMockRecorder) CancelScheduledMessages(ctx, sequenceNumbers, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelScheduledMessages", reflect.TypeOf((*MockSender)(nil).CancelScheduledMessages), ctx, sequenceNumbers, options)
}

// Close mocks base method.
func (m *MockSender) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSenderMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSender)(nil).Close), ctx)
}

// NewMessageBatch mocks base method.
func (m *MockSender) NewMessageBatch(ctx context.Context, options *azservicebus.MessageBatchOptions) (*azservicebus.MessageBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageBatch", ctx, options)
	ret0, _ := ret[0].(*azservicebus.MessageBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessageBatch indicates an expected call of NewMessageBatch.
func (mr *MockSenderMockRecorder) NewMessageBatch(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageBatch", reflect.TypeOf((*MockSender)(nil).NewMessageBatch), ctx, options)
}

// ScheduleAMQPAnnotatedMessages mocks base method.
func (m *MockSender) ScheduleAMQPAnnotatedMessages(ctx context.Context, messages []*azservicebus.AMQPAnnotatedMessage, scheduledEnqueueTime time.Time, options *azservicebus.ScheduleAMQPAnnotatedMessagesOptions) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleAMQPAnnotatedMessages", ctx, messages, scheduledEnqueueTime, options)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleAMQPAnnotatedMessages indicates an expected call of ScheduleAMQPAnnotatedMessages.
func (mr *MockSenderMockRecorder) ScheduleAMQPAnnotatedMessages(ctx, messages, scheduledEnqueueTime, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleAMQPAnnotatedMessages", reflect.TypeOf((*MockSender)(nil).ScheduleAMQPAnnotatedMessages), ctx, messages, scheduledEnqueueTime, options)
}

// ScheduleMessages mocks base method.
func (m *MockSender) ScheduleMessages(ctx context.Context, messages []*azservicebus.Message, scheduledEnqueueTime time.Time, options *azservicebus.ScheduleMessagesOptions) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleMessages", ctx, messages, scheduledEnqueueTime, options)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleMessages indicates an expected call of ScheduleMessages.
func (mr *MockSenderMockRecorder) ScheduleMessages(ctx, messages, scheduledEnqueueTime, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleMessages", reflect.TypeOf((*MockSender)(nil).ScheduleMessages), ctx, messages, scheduledEnqueueTime, options)
}

// SendAMQPAnnotatedMessage mocks base method.
func (m *MockSender) SendAMQPAnnotatedMessage(ctx context.Context, message *azservicebus.AMQPAnnotatedMessage, options *azservicebus.SendAMQPAnnotatedMessageOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAMQPAnnotatedMessage", ctx, message, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAMQPAnnotatedMessage indicates an expected call of SendAMQPAnnotatedMessage.
func (mr *MockSenderMockRecorder) SendAMQPAnnotatedMessage(ctx, message, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAMQPAnnotatedMessage", reflect.TypeOf((*MockSender)(nil).SendAMQPAnnotatedMessage), ctx, message, options)
}

// SendMessage mocks base method.
func (m *MockSender) SendMessage(ctx context.Context, message *azservicebus.Message, options *azservicebus.SendMessageOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, message, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSenderMockRecorder) SendMessage(ctx, message, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSender)(nil).SendMessage), ctx, message, options)
}

// SendMessageBatch mocks base method.
func (m *MockSender) SendMessageBatch(ctx context.Context, batch *azservicebus.MessageBatch, options *azservicebus.SendMessageBatchOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageBatch", ctx, batch, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageBatch indicates an expected call of SendMessageBatch.
func (mr *MockSenderMockRecorder) SendMessageBatch(ctx, batch, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageBatch", reflect.TypeOf((*MockSender)(nil).SendMessageBatch), ctx, batch, options)
}
