// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/sms/sender.go
//
// Generated by this command:
//
//	mockgen -source=./internal/sms/sender.go -package=sms -destination=./internal/sms/mock_sender.go
//

// Package sms is a generated GoMock package.
package sms

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendSMS mocks base method.
func (m *MockSender) SendSMS(phoneNumber, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMS", phoneNumber, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSMS indicates an expected call of SendSMS.
func (mr *MockSenderMockRecorder) SendSMS(phoneNumber, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*MockSender)(nil).SendSMS), phoneNumber, message)
}
