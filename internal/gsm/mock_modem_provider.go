// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/gsm/modem_provider.go
//
// Generated by this command:
//
//	mockgen -source=./internal/gsm/modem_provider.go -package=gsm -destination=./internal/gsm/mock_modem_provider.go
//

// Package gsm is a generated GoMock package.
package gsm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModemProvider is a mock of ModemProvider interface.
type MockModemProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModemProviderMockRecorder
}

// MockModemProviderMockRecorder is the mock recorder for MockModemProvider.
type MockModemProviderMockRecorder struct {
	mock *MockModemProvider
}

// NewMockModemProvider creates a new mock instance.
func NewMockModemProvider(ctrl *gomock.Controller) *MockModemProvider {
	mock := &MockModemProvider{ctrl: ctrl}
	mock.recorder = &MockModemProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModemProvider) EXPECT() *MockModemProviderMockRecorder {
	return m.recorder
}

// GetModem mocks base method.
func (m *MockModemProvider) GetModem() Modem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModem")
	ret0, _ := ret[0].(Modem)
	return ret0
}

// GetModem indicates an expected call of GetModem.
func (mr *MockModemProviderMockRecorder) GetModem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModem", reflect.TypeOf((*MockModemProvider)(nil).GetModem))
}

// ResetModem mocks base method.
func (m *MockModemProvider) ResetModem() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetModem")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetModem indicates an expected call of ResetModem.
func (mr *MockModemProviderMockRecorder) ResetModem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetModem", reflect.TypeOf((*MockModemProvider)(nil).ResetModem))
}
