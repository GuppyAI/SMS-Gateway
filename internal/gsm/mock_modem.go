// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/gsm/modem.go
//
// Generated by this command:
//
//	mockgen -source=./internal/gsm/modem.go -package=gsm -destination=./internal/gsm/mock_modem.go
//

// Package gsm is a generated GoMock package.
package gsm

import (
	reflect "reflect"

	at "github.com/warthog618/modem/at"
	gomock "go.uber.org/mock/gomock"
)

// MockModem is a mock of Modem interface.
type MockModem struct {
	ctrl     *gomock.Controller
	recorder *MockModemMockRecorder
}

// MockModemMockRecorder is the mock recorder for MockModem.
type MockModemMockRecorder struct {
	mock *MockModem
}

// NewMockModem creates a new mock instance.
func NewMockModem(ctrl *gomock.Controller) *MockModem {
	mock := &MockModem{ctrl: ctrl}
	mock.recorder = &MockModemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModem) EXPECT() *MockModemMockRecorder {
	return m.recorder
}

// AddIndication mocks base method.
func (m *MockModem) AddIndication(prefix string, handler at.InfoHandler, options ...at.IndicationOption) error {
	m.ctrl.T.Helper()
	varargs := []any{prefix, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIndication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndication indicates an expected call of AddIndication.
func (mr *MockModemMockRecorder) AddIndication(prefix, handler any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{prefix, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndication", reflect.TypeOf((*MockModem)(nil).AddIndication), varargs...)
}

// CancelIndication mocks base method.
func (m *MockModem) CancelIndication(prefix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelIndication", prefix)
}

// CancelIndication indicates an expected call of CancelIndication.
func (mr *MockModemMockRecorder) CancelIndication(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelIndication", reflect.TypeOf((*MockModem)(nil).CancelIndication), prefix)
}

// Closed mocks base method.
func (m *MockModem) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockModemMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockModem)(nil).Closed))
}

// Command mocks base method.
func (m *MockModem) Command(cmd string, options ...at.CommandOption) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{cmd}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockModemMockRecorder) Command(cmd any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cmd}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockModem)(nil).Command), varargs...)
}

// Escape mocks base method.
func (m *MockModem) Escape(b ...byte) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range b {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Escape", varargs...)
}

// Escape indicates an expected call of Escape.
func (mr *MockModemMockRecorder) Escape(b ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Escape", reflect.TypeOf((*MockModem)(nil).Escape), b...)
}

// Init mocks base method.
func (m *MockModem) Init(options ...at.InitOption) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockModemMockRecorder) Init(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockModem)(nil).Init), options...)
}

// SendLongMessage mocks base method.
func (m *MockModem) SendLongMessage(number, message string, options ...at.CommandOption) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{number, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendLongMessage", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLongMessage indicates an expected call of SendLongMessage.
func (mr *MockModemMockRecorder) SendLongMessage(number, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{number, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLongMessage", reflect.TypeOf((*MockModem)(nil).SendLongMessage), varargs...)
}

// SendPDU mocks base method.
func (m *MockModem) SendPDU(tpdu []byte, options ...at.CommandOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{tpdu}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPDU", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPDU indicates an expected call of SendPDU.
func (mr *MockModemMockRecorder) SendPDU(tpdu any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tpdu}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPDU", reflect.TypeOf((*MockModem)(nil).SendPDU), varargs...)
}

// SendShortMessage mocks base method.
func (m *MockModem) SendShortMessage(number, message string, options ...at.CommandOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{number, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendShortMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendShortMessage indicates an expected call of SendShortMessage.
func (mr *MockModemMockRecorder) SendShortMessage(number, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{number, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendShortMessage", reflect.TypeOf((*MockModem)(nil).SendShortMessage), varargs...)
}
