// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/messaging/message_channel.go
//
// Generated by this command:
//
//	mockgen -source=./internal/messaging/message_channel.go -package=messaging -destination=./internal/messaging/mock_message_channel.go
//

// Package messaging is a generated GoMock package.
package messaging

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageChannel is a mock of MessageChannel interface.
type MockMessageChannel struct {
	ctrl     *gomock.Controller
	recorder *MockMessageChannelMockRecorder
}

// MockMessageChannelMockRecorder is the mock recorder for MockMessageChannel.
type MockMessageChannelMockRecorder struct {
	mock *MockMessageChannel
}

// NewMockMessageChannel creates a new mock instance.
func NewMockMessageChannel(ctrl *gomock.Controller) *MockMessageChannel {
	mock := &MockMessageChannel{ctrl: ctrl}
	mock.recorder = &MockMessageChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageChannel) EXPECT() *MockMessageChannelMockRecorder {
	return m.recorder
}

// GetSupportedSchema mocks base method.
func (m *MockMessageChannel) GetSupportedSchema() AddressSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedSchema")
	ret0, _ := ret[0].(AddressSchema)
	return ret0
}

// GetSupportedSchema indicates an expected call of GetSupportedSchema.
func (mr *MockMessageChannelMockRecorder) GetSupportedSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedSchema", reflect.TypeOf((*MockMessageChannel)(nil).GetSupportedSchema))
}

// ReceiveMessages mocks base method.
func (m *MockMessageChannel) ReceiveMessages(arg0 Broker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessages", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveMessages indicates an expected call of ReceiveMessages.
func (mr *MockMessageChannelMockRecorder) ReceiveMessages(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessages", reflect.TypeOf((*MockMessageChannel)(nil).ReceiveMessages), arg0)
}

// SendMessage mocks base method.
func (m *MockMessageChannel) SendMessage(arg0 Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageChannelMockRecorder) SendMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageChannel)(nil).SendMessage), arg0)
}
