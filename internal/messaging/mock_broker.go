// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/messaging/broker.go
//
// Generated by this command:
//
//	mockgen -source=./internal/messaging/broker.go -package=messaging -destination=./internal/messaging/mock_broker.go
//

// Package messaging is a generated GoMock package.
package messaging

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// AddMessageChannel mocks base method.
func (m *MockBroker) AddMessageChannel(arg0 MessageChannel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMessageChannel", arg0)
}

// AddMessageChannel indicates an expected call of AddMessageChannel.
func (mr *MockBrokerMockRecorder) AddMessageChannel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageChannel", reflect.TypeOf((*MockBroker)(nil).AddMessageChannel), arg0)
}

// Publish mocks base method.
func (m *MockBroker) Publish(arg0 Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockBrokerMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBroker)(nil).Publish), arg0)
}
